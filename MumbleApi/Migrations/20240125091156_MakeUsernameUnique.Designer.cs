// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MumbleApi.Database;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MumbleApi.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240125091156_MakeUsernameUnique")]
    partial class MakeUsernameUnique
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MumbleApi.Entities.Follow", b =>
                {
                    b.Property<string>("FollowerId")
                        .HasColumnType("text")
                        .HasColumnName("follower_id");

                    b.Property<string>("FolloweeId")
                        .HasColumnType("text")
                        .HasColumnName("followee_id");

                    b.HasKey("FollowerId", "FolloweeId")
                        .HasName("pk_follows");

                    b.HasIndex("FolloweeId")
                        .HasDatabaseName("ix_follows_followee_id");

                    b.ToTable("follows", (string)null);
                });

            modelBuilder.Entity("MumbleApi.Entities.Like", b =>
                {
                    b.Property<string>("PostId")
                        .HasColumnType("text")
                        .HasColumnName("post_id");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("PostId", "UserId")
                        .HasName("pk_likes");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_likes_user_id");

                    b.ToTable("likes", (string)null);
                });

            modelBuilder.Entity("MumbleApi.Entities.Post", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("creator_id");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted");

                    b.Property<string>("MediaType")
                        .HasColumnType("text")
                        .HasColumnName("media_type");

                    b.Property<string>("MediaUrl")
                        .HasColumnType("text")
                        .HasColumnName("media_url");

                    b.Property<string>("ParentId")
                        .HasColumnType("text")
                        .HasColumnName("parent_id");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_posts");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_posts_creator_id");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_posts_parent_id");

                    b.ToTable("posts", null, t =>
                        {
                            t.HasCheckConstraint("chk_media_data", "(media_url is null and media_type is null) or (media_url is not null and media_type is not null)");

                            t.HasCheckConstraint("chk_post_content", "(media_url is not null and media_type is not null) or text is not null");
                        });
                });

            modelBuilder.Entity("MumbleApi.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("AvatarMediaType")
                        .HasColumnType("text")
                        .HasColumnName("avatar_media_type");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text")
                        .HasColumnName("avatar_url");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("firstname");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lastname");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("ix_users_username");

                    b.ToTable("users", null, t =>
                        {
                            t.HasCheckConstraint("chk_avatar_type", "(avatar_url is null and avatar_media_type is null) or (avatar_url is not null and avatar_media_type is not null)");
                        });
                });

            modelBuilder.Entity("MumbleApi.Entities.Follow", b =>
                {
                    b.HasOne("MumbleApi.Entities.User", "Followee")
                        .WithMany("Followees")
                        .HasForeignKey("FolloweeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_follows_users_followee_id");

                    b.HasOne("MumbleApi.Entities.User", "Follower")
                        .WithMany("Followers")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_follows_users_follower_id");

                    b.Navigation("Followee");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("MumbleApi.Entities.Like", b =>
                {
                    b.HasOne("MumbleApi.Entities.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_likes_posts_post_id");

                    b.HasOne("MumbleApi.Entities.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_likes_users_user_id");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MumbleApi.Entities.Post", b =>
                {
                    b.HasOne("MumbleApi.Entities.User", "Creator")
                        .WithMany("Posts")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_posts_users_creator_id");

                    b.HasOne("MumbleApi.Entities.Post", "Parent")
                        .WithMany("Replies")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_posts_posts_parent_id");

                    b.Navigation("Creator");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("MumbleApi.Entities.Post", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("MumbleApi.Entities.User", b =>
                {
                    b.Navigation("Followees");

                    b.Navigation("Followers");

                    b.Navigation("Likes");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
